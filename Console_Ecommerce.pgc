//written by group 1.8

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sqlda.h>
#include <pgtypes_date.h>	
#include <pgtypes_numeric.h>

sqlda_t *sqlda1;
sqlda_t *sqlda2;

EXEC SQL BEGIN DECLARE SECTION;
char query[20000],x[20000];
char qq[12][20000];

char c,*ans;
const char *password, *username, *name, *search;
int i=0,intval;
long long int longlongval;
float realval;
date dateval;
numeric numericval;
short shorttype;
EXEC SQL END DECLARE SECTION;

EXEC SQL WHENEVER SQLERROR CALL print_sqlca();

void print_sqlca()
{
    fprintf(stderr, "==== sqlca ====\n");  
    fprintf(stderr, "sqlcode: %ld\n", sqlca.sqlcode);
    fprintf(stderr, "sqlerrm.sqlerrml: %d\n", sqlca.sqlerrm.sqlerrml);
    fprintf(stderr, "sqlerrm.sqlerrmc: %s\n", sqlca.sqlerrm.sqlerrmc);
    fprintf(stderr, "sqlerrd: %ld %ld %ld %ld %ld %ld\n", sqlca.sqlerrd[0],sqlca.sqlerrd[1],sqlca.sqlerrd[2],
                                                          sqlca.sqlerrd[3],sqlca.sqlerrd[4],sqlca.sqlerrd[5]);
    fprintf(stderr, "sqlwarn: %d %d %d %d %d %d %d %d\n", sqlca.sqlwarn[0], sqlca.sqlwarn[1], sqlca.sqlwarn[2],
                                                          sqlca.sqlwarn[3], sqlca.sqlwarn[4], sqlca.sqlwarn[5],
                                                          sqlca.sqlwarn[6], sqlca.sqlwarn[7]);
    fprintf(stderr, "sqlstate: %5s\n", sqlca.sqlstate);
    fprintf(stderr, "===============\n");
}

void ExecuteQuerry()
{
    printf("*********************************************************************************************\n");
	printf("\nEnter a number to execute the query from following list of queries: \n");
    printf("\n1) Best selling product of particular category (based on number of sell)?\n");
    printf("2) Products with particular category having maximum deals and discounts?\n");
    printf("3) Email or Mobile number of Most valuable(or frequent) customer in a particular location (based on number of sells)?\n");
    printf("4) Customer Preferred Category\n");
    printf("5) Total money spent by each customer\n");
    printf("6) Best brand by average deal in a particular category?\n");
    printf("7) Customer preferred Brand\n");

    printf("8) Customer prefered seller?\n");
    printf("9) Customerwise most added brand in cart\n");
    printf("10) Customerwise most added category in cart\n");
    printf("11) Find customer preferred brand in each and every category\n");
    printf("12) Location wise different products\n");
    printf("\nOr Select any of the following Views\n\n");
    printf("13) Product wise sell\n");
    printf("14) Brand wise sell\n");
    printf("15) Category_wise_sell\n");
    printf("16) Seller_wise_sell\n");
    printf("17) Location_wise_sell\n");
    printf("18)  Shipment_Quantities (quantities shipped by shippers)\n");
    printf("19) Category_wise_brand\n");
    printf("20) Product_city_availability (Shows available cities for Products)\n");

    printf("\n OR enter 21 to INPUT your Query\n");
    printf("*********************************************************************************************\n");


    int c;

    scanf("%d",&c);

    switch(c){
        case 1:
        strcpy(query,"SELECT * FROM (SELECT * FROM (SELECT category_id,product_id,totalsell FROM ((SELECT p.product_id,sum(quantity) AS totalsell FROM contains NATURAL JOIN product AS p GROUP BY p.product_id) AS pc NATURAL JOIN product ) AS ppc NATURAL JOIN (SELECT category_id,c_name FROM category) AS c) AS cppc WHERE (category_id,totalsell) IN (SELECT category_id,max(totalsell) FROM (SELECT category_id,product_id,totalsell FROM ((SELECT p.product_id,sum(quantity) AS totalsell FROM contains NATURAL JOIN product AS p GROUP BY p.product_id) AS pc NATURAL JOIN product ) AS ppc NATURAL JOIN (SELECT category_id,c_name FROM category) AS c) AS pppp GROUP BY category_id)) AS temp NATURAL JOIN product");
        break;

        case 2:
        strcpy(query,"SELECT category_id,c_name,product_id,p_name,brand_id,dis_percentage FROM (SELECT * FROM product NATURAL JOIN deal WHERE (category_id,dis_percentage) IN (SELECT category_id,max(dis_percentage) FROM product NATURAL JOIN deal group by category_id)) AS cc NATURAL JOIN (SELECT category_id,c_name FROM category) AS c");
        break;

case 3:
        strcpy(query,"SELECT three.location_id, three.customer_id,c_email, c_name, three.total FROM (SELECT * FROM (SELECT co.location_id, co.customer_id, count(product_id) AS total FROM customerorder AS co JOIN contains AS c ON co.order_id=c.order_id GROUP BY co.location_id, co.customer_id) AS one WHERE (one.location_id, total) IN (SELECT two.location_id, max(total) FROM (SELECT co.location_id, co.customer_id, count(product_id) AS total FROM customerorder AS co JOIN contains AS c ON co.order_id=c.order_id GROUP BY co.location_id, co.customer_id) AS two GROUP BY location_id) ORDER BY location_id) AS three NATURAL JOIN customer ORDER BY three.location_id");
        break;

case 4:
        strcpy(query,"SELECT * FROM (SELECT * FROM (SELECT customer_id, category_id, sum(quantity) AS tot_quant  FROM product NATURAL JOIN contains AS pc JOIN customerorder AS co ON pc.order_id=co.order_id GROUP BY customer_id, category_id) AS abc WHERE (customer_id, tot_quant) IN (SELECT customer_id, max(tot_quant) AS tot_quant FROM (SELECT customer_id, category_id, sum(quantity) AS tot_quant FROM product NATURAL JOIN contains AS pc JOIN customerorder AS co ON pc.order_id=co.order_id GROUP BY customer_id, category_id) AS css GROUP BY customer_id)) AS acb NATURAL JOIN category ORDER BY customer_id");
        break;

case 5:
        strcpy(query,"SELECT sum(amount) AS money_spent, customer_id FROM customer NATURAL JOIN customerorder NATURAL JOIN payment GROUP BY customer_id ORDER BY money_spent");
        break;

case 6:
        strcpy(query,"SELECT category_id,c_name,brand_id,b_name,avg_deal FROM category_wise_brand NATURAL JOIN (SELECT brand_id,category_id,avg(dis_percentage) AS avg_deal FROM product NATURAL JOIN deal group by brand_id,category_id) AS bdc WHERE (category_id,avg_deal) IN (SELECT category_id, max(avg_deal) FROM (SELECT brand_id,category_id,avg(dis_percentage) AS avg_deal FROM product NATURAL JOIN deal group by brand_id,category_id) AS bdc group by category_id)");
        break;

case 7:
        strcpy(query,"SELECT * FROM (SELECT * FROM (SELECT customer_id, brand_id, sum(quantity) AS tot_quant  FROM product NATURAL JOIN contains AS pc JOIN customerorder AS co ON pc.order_id=co.order_id GROUP BY customer_id, brand_id) AS abc WHERE (customer_id, tot_quant) IN (SELECT customer_id, max(tot_quant) AS tot_quant FROM (SELECT customer_id, brand_id, sum(quantity) AS tot_quant FROM product NATURAL JOIN contains AS pc JOIN customerorder AS co ON pc.order_id=co.order_id GROUP BY customer_id, brand_id) AS css GROUP BY customer_id)) AS acb NATURAL JOIN brand ORDER BY customer_id;");
        break;

case 8:
        strcpy(query,"SELECT customer_id,seller_id,s_name,tot_quant,customer_rating FROM (SELECT * FROM (SELECT customer_id, seller_id, sum(quantity) AS tot_quant  FROM product NATURAL JOIN contains AS pc JOIN customerorder AS co ON pc.order_id=co.order_id GROUP BY customer_id, seller_id) AS abc WHERE (customer_id, tot_quant) IN (SELECT customer_id, max(tot_quant) AS tot_quant FROM (SELECT customer_id, seller_id, sum(quantity) AS tot_quant FROM product NATURAL JOIN contains AS pc JOIN customerorder AS co ON pc.order_id=co.order_id GROUP BY customer_id, seller_id) AS css GROUP BY customer_id)) AS acb NATURAL JOIN seller ORDER BY customer_id");
        break;

case 9:
        strcpy(query,"SELECT customer_id, brand_id, b_name, cartquantity FROM (SELECT * FROM (SELECT * FROM (SELECT customer_id, brand_id, count(*) AS cartquantity FROM cart NATURAL JOIN availability NATURAL JOIN product NATURAL JOIN customer GROUP BY brand_id, customer_id) AS one) AS two WHERE (customer_id, cartquantity) in (SELECT customer_id, max(cartquantity) AS mostusedbrand FROM (SELECT customer_id, brand_id, count(*) AS cartquantity FROM cart NATURAL JOIN availability NATURAL JOIN product NATURAL JOIN customer GROUP BY brand_id, customer_id) AS three GROUP BY customer_id)) AS four NATURAL JOIN brand");
        break;

case 10:
        strcpy(query,"SELECT customer_id, category_id, c_name, cartquantity FROM (SELECT * FROM (SELECT * FROM (SELECT customer_id, category_id, count(*) AS cartquantity FROM cart NATURAL JOIN availability NATURAL JOIN product NATURAL JOIN customer GROUP BY category_id, customer_id) AS one) AS two WHERE (customer_id, cartquantity) in (SELECT customer_id, max(cartquantity) AS mostusedcategory FROM (SELECT customer_id, category_id, count(*) AS cartquantity FROM cart NATURAL JOIN availability NATURAL JOIN product NATURAL JOIN customer GROUP BY category_id, customer_id) AS three GROUP BY customer_id)) AS four NATURAL JOIN category ");
        break;

case 11:
        strcpy(query,"SELECT four.customer_id, c.c_name, b.b_name, four.max FROM (SELECT two.customer_id, two.category_id, two.brand_id, two.total AS max FROM (SELECT * FROM (SELECT co.customer_id, p.category_id, p.brand_id, sum(c.quantity) AS total FROM customerorder AS co join contains AS c ON c.order_id=co.order_id join product AS p ON p.product_id=c.product_id GROUP BY co.customer_id, p.category_id, p.brand_id) AS three) AS two WHERE (two.customer_id, two.category_id, two.total) IN (SELECT one.customer_id, one.category_id, max(total) FROM ( SELECT co.customer_id, p.category_id, p.brand_id, sum(c.quantity) AS total FROM customerorder AS co join contains AS c ON c.order_id=co.order_id join product AS p ON p.product_id=c.product_id GROUP BY co.customer_id, p.category_id, p.brand_id) AS one GROUP BY one.customer_id, one.category_id)) AS four NATURAL JOIN category AS c NATURAL JOIN brand AS b ORDER BY four.customer_id, c.c_name");
        break;

case 12:
        strcpy(query,"SELECT location_id, count(product_id) AS no_of_diff_products FROM availability GROUP BY location_id");
        break;

case 13:
        strcpy(query,"SELECT * FROM (SELECT product_id,sum(quantity) FROM contains group by product_id) AS p NATURAL JOIN product");
        break;

case 14:
        strcpy(query,"SELECT * FROM (SELECT brand_id,sum(sell) FROM (SELECT product_id,sum(quantity) AS sell FROM contains group by product_id) AS p NATURAL JOIN product group by brand_id) AS bs NATURAL JOIN brand");
        break;
case 15:
        strcpy(query,"SELECT * FROM (SELECT category_id,sum(sell) FROM (SELECT product_id,sum(quantity) AS sell FROM contains group by product_id) AS p NATURAL JOIN product group by category_id) AS cs NATURAL JOIN category AS c");
        break;
case 16:
        strcpy(query,"SELECT * FROM(SELECT seller_id,sum(quantity) AS sell FROM contains group by seller_id) AS s NATURAL JOIN seller");
        break;
case 17:
        strcpy(query,"SELECT * FROM (SELECT location_id AS pincode,sum(quantity) AS sell FROM contains group by location_id) AS l NATURAL JOIN location");
        break;
case 19:
        strcpy(query,"SELECT DISTINCT category_id,c_name,brand_id,b_name FROM (SELECT category_id,c_name FROM category) AS c NATURAL JOIN product NATURAL JOIN brand ORDER BY category_id");
        break;
case 18:
        strcpy(query,"SELECT * FROM (SELECT shipper_id, sum(quantity) AS Qua_shipped FROM contains group by shipper_id) AS s NATURAL JOIN shipper");
        break;
case 20:
        strcpy(query,"SELECT distinct product_id, p_name, city FROM product NATURAL JOIN availability NATURAL JOIN location ORDER BY product_id");
        break;
case 21:
    scanf(" %[^\n]",query);
    break;

default:
    printf("\nEnter your Query: \n");
    scanf(" %[^\n]",query);
    break;
    

    }
	
    int firstTime = 1;

	EXEC SQL PREPARE eq FROM :query;
	EXEC SQL DECLARE cur1 CURSOR FOR eq;
	EXEC SQL OPEN cur1;

	while(sqlca.sqlcode==0){

		EXEC SQL FETCH NEXT FROM cur1 INTO DESCRIPTOR sqlda1;
		sqlda_t *cur_sqlda;
		
		for (cur_sqlda = sqlda1;cur_sqlda != NULL;cur_sqlda = cur_sqlda->desc_next){

			int i;
	        char name_buf[1024];
	        char var_buf[1024];

	    	point: for (i = 0; i < cur_sqlda->sqld; i++){

	    		sqlvar_t v = cur_sqlda->sqlvar[i];
	    		char *sqldata = v.sqldata;
	    		short sqllen  = v.sqllen;
	    		strncpy(name_buf, v.sqlname.data, v.sqlname.length);
	            name_buf[v.sqlname.length] = '\0';

	            switch (v.sqltype){

	                case ECPGt_char:
	                    memset(&var_buf, 0, sizeof(var_buf));
	                    memcpy(&var_buf, sqldata, (sizeof(var_buf)<=sqllen ? sizeof(var_buf)-1 : sqllen) );
	                    break;

	                case ECPGt_int: /* integer */
	                    memcpy(&intval, sqldata, sqllen);
	                    snprintf(var_buf, sizeof(var_buf), "%d", intval);
	                    break;

	                case ECPGt_long_long: /* bigint */
	                    memcpy(&longlongval, sqldata, sqllen);
	                    snprintf(var_buf, sizeof(var_buf), "%lld", longlongval);
	                    break;

	                case ECPGt_float: /* real */
	                    memcpy(&realval, sqldata, sqllen);
	                    snprintf(var_buf, sizeof(var_buf), "%f", realval);
	                    break;

	                case ECPGt_date: /* date */
	                    memcpy(&dateval, sqldata, sqllen);
	                    snprintf(var_buf, sizeof(var_buf), "%s", PGTYPESdate_to_asc(dateval));
	                    break;

	                case ECPGt_numeric: /* numeric */
	                    memcpy(&numericval, sqldata, sqllen);
	                    snprintf(var_buf, sizeof(var_buf), "%s", PGTYPESnumeric_to_asc(&numericval, 0));
	                    break;

                    case ECPGt_short: /* small int*/
	                    memcpy(&shorttype, sqldata, sqllen);
	                    snprintf(var_buf, sizeof(var_buf), "%d", shorttype);
	                    break;

                    case 7: /* bigint*/
	                    memcpy(&longlongval, sqldata, sqllen);
	                    snprintf(var_buf, sizeof(var_buf), "%lld", longlongval);
	                    break;

	                default:
	                	{
	                    	int i;
	                    	memset(var_buf, 0, sizeof(var_buf));
	                    	for (i = 0; i < sqllen; i++){
	                     	   char tmpbuf[16];
	                    	    snprintf(tmpbuf, sizeof(tmpbuf), "%02x ", (unsigned char) sqldata[i]);
	                    	    strncat(var_buf, tmpbuf, sizeof(var_buf));
	                   		}
	                	}
	                    break;

	                }

	                if(firstTime){
	                	if(!strcmp("c_email", name_buf))
	                		printf("%-35s", name_buf);
	                	else
	                		printf("%-15s", name_buf);

	                }else{
	                	if(!strcmp("c_email", name_buf))
	                		printf("%-35s", var_buf);
	                	else
	                		printf("%-15s", var_buf);
	                }

	        }

	            printf("\n");
	            if(firstTime){
	            	firstTime = 0;
	            	printf("\n");
	            	goto point;
	            }

	    }

	}

	EXEC SQL CLOSE cur1;
	EXEC SQL COMMIT;
}

void UpdateQuerry(){
	printf("\nQuery : ");
	scanf(" %[^\n]",query);

	EXEC SQL PREPARE uq FROM :query;
	EXEC SQL EXECUTE uq;

	if(sqlca.sqlcode==0)
		fprintf(stderr, "Successful\n");	

	EXEC SQL COMMIT;
}

int main(){

	username = "postgres";
	name = "postgres@127.0.0.1";
	password = "2015x01409";
	search = "project";

    EXEC SQL CONNECT TO :name USER :username USING :password;
	if(sqlca.sqlcode==0){
		fprintf(stderr, "Connection Successful\n");
	}else{
		fprintf(stderr,"Connection couldn't be established\n");
		exit(1);
	}

	EXEC SQL set search_path to :search;
	if(sqlca.sqlcode==0){
		fprintf(stderr,"Search_path Successfully set\n");
	}else{
		fprintf(stderr,"No such path available\n");
		exit(1);
	}

	while(1){
 printf("*********************************************************************************************\n");
		printf("Press 1 for SELECT type query.\n*********************************************************************************************\nPress 2 for INSERT,UPDATE and DELETE type Query.\n*********************************************************************************************\nPress anything else to exit.\n");
		scanf(" %c",&c);

		if(c=='2'){
			UpdateQuerry();
		}else if(c=='1'){
			ExecuteQuerry();
		}
		else
			break;
	}

    EXEC SQL DISCONNECT ALL;
    return 0;
}
